openapi: 3.1.0
info:
  title: AnchorBrowser API
  version: 1.0.0
  description: APIs to manage all browser-related actions and configuration.
servers:
  - url: https://api.anchorbrowser.io
    description: API server
components:
  securitySchemes:
    api_key_header:
      type: apiKey
      in: header
      name: anchor-api-key
      description: API key passed in the header
  schemas:
    # ==============================
    # SHARED RESPONSE SCHEMAS
    # ==============================
    # These schemas are used across multiple resources
    SuccessResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            status:
              type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string

    # ==============================
    # PROXY CONFIGURATION SCHEMAS
    # ==============================
    ProxyConfig:
        description: |
          Proxy Documentation available at [Proxy Documentation](/advanced/proxy)
        type: object
        oneOf:
          - $ref: '#/components/schemas/AnchorProxy'
          - $ref: '#/components/schemas/CustomProxy'

    AnchorProxy:
      title: Anchor Proxy
      type: object
      properties:
        active:
          type: boolean
        type:
          type: string
          description: |
            **On change make sure to update the country_code.**
          oneOf:
            - enum: [anchor_proxy, anchor_residential, anchor_mobile, anchor_gov]
              title: anchor_residential
              description: Create a session with a residential proxy to access websites as if you're browsing from a computer in that country.
            - enum: [anchor_proxy, anchor_residential, anchor_mobile, anchor_gov]
              description: Create a session with a mobile proxy to access websites as if you're browsing from a mobile device in that country.
              title: anchor_mobile 
            - enum: [anchor_proxy, anchor_residential, anchor_mobile, anchor_gov]
              description: Create your session with a residential proxy to access websites as if you're browsing from a computer in that country. This option reduces the chance of being blocked by governmental websites.
              title: anchor_gov
            - enum: [anchor_proxy, anchor_residential, anchor_mobile, anchor_gov]
              description: Create a session with a proxy to access websites as if you're browsing from a computer in that country.
              title: anchor_proxy
          
        country_code:
          oneOf:
            - $ref: '#/components/schemas/AnchorProxyCountryCode'
            - $ref: '#/components/schemas/ResidentialCountryCode'
            - $ref: '#/components/schemas/MobileCountryCode'
            - $ref: '#/components/schemas/GovCountryCode'
          description: |
            Supported country codes ISO 2 lowercase
            
            **On change make sure to update the Proxy type.**
        region:
          type: string
          description: |
            Region code for more specific geographic targeting.
            The city parameter can only be used when region is also provided.
        city:
          type: string
          description: |
            City name for precise geographic targeting. Supported for anchor_proxy only.
            Can only be used when region is also provided.
      required: [active]


    CustomProxy:
      title: Custom Proxy
      type: object
      properties:
        type:
          type: string
          enum: [custom]
        server:
          type: string
          description: Proxy server address
        username:
          type: string
          description: Proxy username
        password:
          type: string
          description: Proxy password
        active:
          type: boolean
      required: [type, server, username, password, active]
      

    ResidentialCountryCode:
      type: string
      title: anchor_residential
      enum: [af, al, dz, ad, ao, ag, ar, am, aw, au, at, az, bs, bh, bd, bb, by, be, bz, bj, bm, bo, ba, bw, br, bn, bg, bf, bi, kh, cm, ca, cv, td, cl, cn, co, cg, cr, ci, hr, cu, cy, cz, dk, dj, dm, do, ec, eg, sv, gq, ee, sz, et, fj, fi, fr, pf, ga, gm, ge, de, gh, gr, gd, gt, gn, gy, ht, hn, hk, hu, is, in, id, ir, iq, ie, il, it, jm, jp, jo, kz, ke, kw, kg, la, lv, lb, ls, lr, ly, lt, lu, mk, mg, mw, my, mv, ml, mt, mr, mx, md, mn, me, ma, mz, mm, na, np, nl, nc, nz, ni, ne, ng, no, om, pk, pa, pg, py, pe, ph, pl, pt, pr, qa, ro, ru, rw, lc, ws, sm, sa, sn, rs, sl, sg, sk, si, so, za, kr, ss, es, lk, sd, sr, se, ch, sy, st, tw, tj, tz, th, tl, tr, tg, tt, tn, tm, ug, ua, gb, us, uy, uz, vu, ve, vn, ye, zm, zw]
      default: us
    MobileCountryCode:
      type: string
      title: anchor_mobile
      enum: [af, al, dz, ao, ag, ar, am, au, at, az, bs, bh, bd, bb, be, bz, bj, bt, bo, ba, bw, br, bg, bf, kh, cm, ca, cv, cl, cn, co, cg, ci, hr, cu, cy, cz, dk, do, ec, eg, sv, ee, et, fj, fi, fr, ga, gm, ge, de, gh, gr, gt, gw, gy, ht, hn, hu, is, in, id, iq, ie, il, it, jm, jp, jo, kz, ke, kw, kg, la, lv, lb, lr, ly, lt, mk, mw, my, mv, ml, mt, mu, mx, md, mn, me, ma, mz, np, nl, nc, nz, na, ni, ng, no, om, pk, pa, py, pe, ph, pl, pt, qa, ro, ru, rw, sa, sn, rs, sl, sg, sk, si, za, kr, es, lk, sd, se, ch, sy, tw, tj, tz, th, tg, tt, tn, tr, ug, ua, ae, gb, us, uy, uz, ve, vn, ye, zm, zw]
      default: us
    GovCountryCode:
      type: string
      title: anchor_gov
      enum: [af, al, dz, ad, ao, as, ag, ar, am, aw, au, at, az, bs, bh, bb, by, be, bz, bj, bm, bo, ba, br, bg, bf, cm, ca, cv, td, cl, co, cg, cr, ci, hr, cu, cy, cz, dk, dm, do, ec, eg, sv, ee, et, fo, fi, fr, gf, pf, ga, gm, ge, de, gh, gi, gr, gd, gp, gt, gg, gn, gw, gy, ht, hn, hu, is, in, ir, iq, ie, il, it, jm, jp, jo, kz, kw, kg, lv, lb, ly, li, lt, lu, mk, ml, mt, mq, mr, mx, md, mc, me, ma, nl, nz, ni, ng, no, pk, pa, py, pe, ph, pl, pt, pr, qa, ro, lc, sm, sa, sn, rs, sc, sl, sk, si, so, za, kr, es, sr, se, ch, sy, st, tw, tj, tg, tt, tn, tr, tc, ua, ae, us, uy, uz, ve, ye]
      default: us
    AnchorProxyCountryCode:
      type: string
      title: anchor_proxy
      enum: [af, al, dz, ad, ao, as, ag, ar, am, aw, au, at, az, bs, bh, bb, by, be, bz, bj, bm, bo, ba, br, bg, bf, cm, ca, cv, td, cl, co, cg, cr, ci, hr, cu, cy, cz, dk, dm, do, ec, eg, sv, ee, et, fo, fi, fr, gf, pf, ga, gm, ge, de, gh, gi, gr, gd, gp, gt, gg, gn, gw, gy, ht, hn, hu, is, in, ir, iq, ie, il, it, jm, jp, jo, kz, kw, kg, lv, lb, ly, li, lt, lu, mk, ml, mt, mq, mr, mx, md, mc, me, ma, nl, nz, ni, ng, no, pk, pa, py, pe, ph, pl, pt, pr, qa, ro, lc, sm, sa, sn, rs, sc, sl, sk, si, so, za, kr, es, sr, se, ch, sy, st, tw, tj, tg, tt, tn, tr, tc, ua, ae, us, uy, uz, ve, ye]
      default: us
    # ==============================
    # PROFILE SCHEMAS
    # ==============================
    ProfileRequestSchema:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the profile.
        description:
          type: string
          description: A description of the profile.
        source:
          type: string
          description: The source of the profile data. currently only `session` is supported.
          enum:
            - session
        session_id:
          type: string
          format: uuid
          description: The browser session ID is required if the source is set to `session`. The browser session must be running, and the profile will be stored once the browser session terminates.
        dedicated_sticky_ip:
          type: boolean
          description: Whether to use a dedicated sticky IP for this profile. Defaults to false.

    ProfileResponseSchema:
      type: object
      properties:
        name:
          type: string
          description: The name of the profile.
        description:
          type: string
          description: A description of the profile.
        source:
          type: string
          description: The source of the profile data.
          enum:
            - session
        session_id:
          type: string
          format: uuid
          description: The browser session ID used to create this profile, if applicable.
        status:
          type: string
          description: The current status of the profile.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the profile was created.

    ProfileListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              description: Total number of profiles
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProfileResponseSchema'

    ProfileResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProfileResponseSchema'

    # ==============================
    # BROWSER SESSION SCHEMAS
    # ==============================
    SessionConfig:
      type: object
      description: Session-related configurations.
      properties:
        initial_url:
          type: string
          format: uri
          description: The URL to navigate to when the browser session starts. If not provided, the browser will load an empty page.
        recording:
          type: object
          description: Configuration for session recording.
          properties:
            active:
              type: boolean
              description: Enable or disable video recording of the browser session. Defaults to `true`.
        proxy:
          $ref: '#/components/schemas/ProxyConfig'
        timeout:
          type: object
          description: Timeout configurations for the browser session.
          properties:
            max_duration:
              type: integer
              description: Maximum amount of time (in minutes) for the browser to run before terminating. Defaults to `20`.
            idle_timeout:
              type: integer
              description: The amount of time (in minutes) the browser session waits for new connections after all others are closed before stopping. Defaults to `5`.
        live_view:
          type: object
          description: Configuration for live viewing the browser session.
          properties:
            read_only:
              type: boolean
              description: Enable or disable read-only mode for live viewing. Defaults to `false`.

    BrowserConfig:
      type: object
      description: Browser-specific configurations.
      properties:
        profile:
          type: object
          description: Options for managing and persisting browser session profiles.
          properties:
            name:
              type: string
              description: The name of the profile to be used during the browser session.
            persist:
              type: boolean
              description: Indicates whether the browser session profile data should be saved when the browser session ends. Defaults to `false`.
        adblock:
          type: object
          description: Configuration for ad-blocking.
          properties:
            active:
              type: boolean
              description: Enable or disable ad-blocking. Defaults to `true`.
        popup_blocker:
          type: object
          description: Configuration for popup blocking.
          properties:
            active:
              type: boolean
              description: Blocks popups, including ads and CAPTCHA consent banners. Requires adblock to be active. Defaults to `true`.
        captcha_solver:
          type: object
          description: Configuration for captcha-solving.
          properties:
            active:
              type: boolean
              description: Enable or disable captcha-solving. Requires proxy to be active. Defaults to `false`.
        headless:
          type: object
          description: Configuration for headless mode.
          properties:
            active:
              type: boolean
              description: Whether browser should be headless or headful. Defaults to `false`.
        viewport:
          type: object
          description: Configuration for the browser's viewport size.
          properties:
            width:
              type: integer
              description: Width of the viewport in pixels. Defaults to `1440`.
            height:
              type: integer
              description: Height of the viewport in pixels. Defaults to `900`.
        fullscreen:
          type: object
          description: Configuration for fullscreen mode.
          properties:
            active:
              type: boolean
              description: Enable or disable fullscreen mode. When enabled, the browser will start in fullscreen mode. Defaults to `false`.
        p2p_download:
          type: object
          description: Configuration for peer-to-peer download capture functionality.
          properties:
            active:
              type: boolean
              description: Enable or disable P2P downloads. When enabled, the browser will capture downloads for direct data extraction, instead of uploading them on Anchor's storage. Defaults to `false`.
        extensions:
          type: array
          description: Array of extension IDs to load in the browser session. Extensions must be previously uploaded using the Extensions API.
          items:
            type: string
            format: uuid
        disable_web_security:
          type: object
          description: Configuration for disabling web security features.
          properties:
            active:
              type: boolean
              description: Whether to disable web security features (CORS, same-origin policy, etc.). Allows accessing iframes and resources from different origins. Defaults to `false`.

    SessionCreateRequestSchema:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/SessionConfig'
        browser:
          $ref: '#/components/schemas/BrowserConfig'

    SessionCreateResponseSchema:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              description: Unique identifier for the browser session
            cdp_url:
              type: string
              description: The CDP websocket connection string
            live_view_url:
              type: string
              description: The browser session live view url

    SessionStatus:
      type: object
      properties:
        session_id:
          type: string
          description: Unique identifier for the browser session
        status:
          type: string
          description: Current status of the browser session
        created_at:
          type: string
          format: date-time
          description: Timestamp when the browser session was created
      required:
        - session_id
        - status
        - created_at

    SessionListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              description: Total number of browser sessions
            items:
              type: array
              items:
                $ref: '#/components/schemas/SessionStatus'

    # ==============================
    # RECORDING SCHEMAS
    # ==============================
    RecordingItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the recording
        is_primary:
          type: boolean
          description: Indicates if this is the primary recording
        file_link:
          type: string
          description: URL to access the recording file
        suggested_file_name:
          type: string
          description: Suggested filename for the recording
        duration:
          type: string
          description: Duration of the recording
        size:
          type: number
          description: Size of the recording file in bytes
        created_at:
          type: string
          format: date-time
          description: Timestamp when the recording was created

    RecordingListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              description: Total number of video recordings
            items:
              type: array
              items:
                $ref: '#/components/schemas/RecordingItem'

    # ==============================
    # DOWNLOAD SCHEMAS
    # ==============================
    DownloadItem:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the download record.
        file_link:
          type: string
          format: uri
          description: The URL to download the file from anchorbrowser servers. Requires api key authentication.
        original_download_url:
          type: string
          format: uri
          description: The URL used to download the file.
        origin_url:
          type: string
          format: uri
          description: The original URL where the file was found.
        suggested_file_name:
          type: string
          description: The suggested file name for saving the file.
        original_file_name:
          type: string
          description: The original file name before any modification.
        duration:
          type: integer
          description: The time it took to process or download the file, in milliseconds.
        size:
          type: integer
          description: The size of the file in bytes.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the file record was created.

    DownloadListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            count:
              type: integer
              description: Total number of downloads
            items:
              type: array
              items:
                $ref: '#/components/schemas/DownloadItem'

    # ==============================
    # TOOL SCHEMAS
    # ==============================
    FetchWebpageRequestSchema:
      type: object
      properties:
        url:
          type: string
          description: The URL of the webpage to fetch content from. When left empty, the current webpage is used.
        format:
          type: string
          description: The output format of the content.
          enum:
            - html
            - markdown
        wait:
          type: integer
          description: The time to wait for **dynamic** content to load in **milliseconds**.
        new_page:
          type: boolean
          description: Whether to create a new page for the content.
        page_index:
          type: integer
          description: The index of the page to fetch content from. **Overides new_page**.
        return_partial_on_timeout:
          type: boolean
          description: Whether to return partial content if the content is not loaded within the 20 seconds.


    PerformWebTaskRequestSchema:
      type: object
      required:
        - prompt
      properties:
        url:
          type: string
          description: The URL of the webpage. If not provided, the tool will use the current page in the session.
        prompt:
          type: string
          description: The task to be autonomously completed.
        agent:
          type: string
          description: The AI agent to use for task completion. Defaults to browser-use.
          enum:
            - browser-use
            - openai-cua
        provider:
          type: string
          description: The AI provider to use for task completion.
          enum:
            - openai
            - gemini
            - groq
            - azure
            - xai
        model:
          type: string
          description: The specific model to use for task completion. see our [models](/agentic-browser-control/ai-task-completion#available-models) page for more information.
        highlight_elements:
          type: boolean
          description: Whether to highlight elements during task execution for better visibility.
        output_schema:
          type: object
          description: JSON Schema defining the expected structure of the output data.

    PerformWebTaskResponseSchema:
      type: object
      properties:
        data:
          type: object
          properties:
            result:
              type: string
              description: The outcome or answer produced by the autonomous task.

    ScreenshotRequestSchema:
      type: object
      properties:
        url:
          type: string
          description: The URL of the webpage to capture.
        width:
          type: integer
          description: The width of the browser viewport in pixels.
        height:
          type: integer
          description: The height of the browser viewport in pixels.
        image_quality:
          type: integer
          description: Quality of the output image, on the range 1-100. 100 will not perform any compression.
        wait:
          type: integer
          description: Duration in milliseconds to wait after page has loaded, mainly used for sites with JS animations.
        scroll_all_content:
          type: boolean
          description: If true, scrolls the page and captures all visible content.
        capture_full_height:
          type: boolean
          description: If true, captures the entire height of the page, ignoring the viewport height.
        s3_target_address:
          type: string
          description: Presigned S3 url target to upload the image to.

    # ==============================
    # OS LEVEL CONTROL SCHEMAS
    # ==============================
    CoordinatesRequestSchema:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          description: X coordinate
        y:
          type: integer
          description: Y coordinate

    MouseClickRequestSchema:
      allOf:
        - $ref: '#/components/schemas/CoordinatesRequestSchema'
        - type: object
          properties:
            button:
              type: string
              description: Mouse button to use
              enum: [left, middle, right]

    DragDropRequestSchema:
      type: object
      required:
        - startX
        - startY
        - endX
        - endY
      properties:
        startX:
          type: integer
          description: Starting X coordinate
        startY:
          type: integer
          description: Starting Y coordinate
        endX:
          type: integer
          description: Ending X coordinate
        endY:
          type: integer
          description: Ending Y coordinate
        button:
          type: string
          description: Mouse button to use
          enum: [left, middle, right]

    ScrollRequestSchema:
      allOf:
        - $ref: '#/components/schemas/CoordinatesRequestSchema'
        - type: object
          required:
            - deltaY
          properties:
            deltaX:
              type: integer
              description: Horizontal scroll amount (positive is right, negative is left)
            deltaY:
              type: integer
              description: Vertical scroll amount (positive is down, negative is up)
            steps:
              type: integer
              description: Number of steps to break the scroll into for smoother scrolling
            useOs:
              type: boolean
              description: Whether to use the OS scroll or the Playwright scroll

    TypeTextRequestSchema:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Text to type
        delay:
          type: integer
          description: Delay between keystrokes in milliseconds

    KeyboardShortcutRequestSchema:
      type: object
      required:
        - keys
      properties:
        keys:
          type: array
          description: Array of keys to press simultaneously
          items:
            type: string
        holdTime:
          type: integer
          description: Time to hold the keys down in milliseconds

    ClipboardResponseSchema:
      type: object
      properties:
        data:
          type: object
          properties:
            text:
              type: string
              description: Text content of the clipboard

    ClipboardRequestSchema:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Text to set in the clipboard

    CopyResponseSchema:
      type: object
      properties:
        text:
          type: string
          description: The text that was copied

    PasteRequestSchema:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Text to paste

    NavigateRequestSchema:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: The URL to navigate to

    # ==============================
    # EVENT COORDINATION SCHEMAS
    # ==============================
    # Schemas related to event signaling and coordination between workflows/sessions
    WaitForEventRequestSchema:
      type: object
      properties:
        timeoutMs:
          type: integer
          description: Timeout in milliseconds to wait for the event. Defaults to 60000ms (1 minute).

    SignalEventRequestSchema:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          description: Event data to be passed to waiting clients
          additionalProperties: true
          example:
            message: "Task completed"
            result: "success"
            timestamp: "2024-01-01T12:00:00Z"

    EventResponseSchema:
      type: object
      properties:
        data:
          type: object
          description: The event data that was signaled
          additionalProperties: true
          example:
            message: "Task completed"
            result: "success"
            timestamp: "2024-01-01T12:00:00Z"

    # ==============================
    # EXTENSION SCHEMAS
    # ==============================
    # Schemas related to browser extension management
    ExtensionManifest:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        manifest_version:
          type: integer
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
      additionalProperties: true

    ExtensionResponseSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the extension
        name:
          type: string
          description: Extension name
        manifest:
          $ref: '#/components/schemas/ExtensionManifest'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the extension was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the extension was last updated

    ExtensionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExtensionResponseSchema'

    ExtensionResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ExtensionResponseSchema'

paths:
  /v1/profiles:
    post:
      summary: Create Profile
      description: Creates a new profile from a browser session. A Profile stores cookies, local storage, and cache.
      security:
        - api_key_header: []
      tags:
        - Profiles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequestSchema'
      responses:
        '200':
          description: Profile created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request or input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found or unreachable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Profile name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '501':
          description: Feature not implemented.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List Profiles
      description: Fetches all stored profiles.
      security:
        - api_key_header: []
      tags:
        - Profiles
      responses:
        '200':
          description: List of user profiles retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileListResponse'
        '500':
          description: Unable to list user profiles due to an unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/profiles/{name}:
    get:
      summary: Get Profile
      description: Retrieves details of a specific profile by its name.
      security:
        - api_key_header: []
      tags:
        - Profiles
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the profile to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Profile details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Invalid API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to retrieve profile due to an unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete Profile
      description: Deletes an existing profile by its name.
      security:
        - api_key_header: []
      tags:
        - Profiles
      parameters:
        - name: name
          in: path
          required: true
          description: The name of the profile to delete.
          schema:
            type: string
      responses:
        '200':
          description: Profile deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to delete the profile due to an unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions:
    post:
      summary: Start Browser Session
      description: Allocates a new browser session for the user, with optional configurations for ad-blocking, captcha solving, proxy usage, and idle timeout.
      security:
        - api_key_header: []
      tags:
        - Browser Sessions
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequestSchema'
      responses:
        '200':
          description: Successfully returned a browser object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCreateResponseSchema'
        '400':
          description: Bad Request - Invalid request parameters or configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                captchaSolverRequiresProxy:
                  summary: CAPTCHA solver requires proxy to be active.
                  value:
                    error:
                      code: 400
                      message: CAPTCHA solver requires proxy to be active.
        '402':
          description: Payment Required - Insufficient credits to allocate a new browser
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions/all:
    delete:
      summary: End All Sessions
      description: Terminates all active browser sessions associated with the provided API key.
      tags:
        - Browser Sessions
      security:
        - api_key_header: []
      responses:
        '200':
          description: Successfully terminated all active browser sessions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /v1/sessions/all/status:
    get:
      summary: List All Sessions Status
      description: Retrieves status information for all browser sessions associated with the API key.
      security:
        - api_key_header: []
      tags:
        - Browser Sessions
      responses:
        '200':
          description: Successfully retrieved status for all browser sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
        '401':
          description: Invalid API Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions/{session_id}:
    get:
      summary: Get Browser Session
      description: Retrieves detailed information about a specific browser session.
      tags:
        - Browser Sessions
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the session to retrieve.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        "200":
          description: Session retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier of the session.
                  team_id:
                    type: string
                    description: The team ID associated with the session.
                  duration:
                    type: integer
                    description: The duration of the session in seconds.
                  status:
                    type: string
                    description: The current status of the session.
                  credits_used:
                    type: number
                    description: The number of credits consumed by the session.
                  configuration:
                    type: object
                    description: The configuration settings for the session.
                  playground:
                    type: boolean
                    description: Whether this is a playground session.
                  proxy_bytes:
                    type: integer
                    description: The number of bytes transferred through the proxy.
                  tokens:
                    type: object
                    description: Token usage information.
                  steps:
                    type: array
                    items:
                      type: object
                    description: Array of steps executed in the session.
                  tags:
                    type: object
                    description: Tags associated with the session.
                  created_at:
                    type: string
                    format: date-time
                    description: The timestamp when the session was created.
        "404":
          description: Session not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to fetch session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: End Browser Session
      description: Deletes the browser session associated with the provided browser session ID. Requires a valid API key for authentication.
      tags:
        - Browser Sessions
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the browser session to end.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        '200':
          description: Browser session ended successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid API Key or browser session ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions/{session_id}/pages:
    get:
      summary: Get Browser Session Pages
      description: Retrieves a list of pages associated with a specific browser session.
      tags:
        - Browser Sessions
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the session to retrieve pages for.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        "200":
          description: Session pages retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier of the page.
                    title:
                      type: string
                      description: The title of the page.
                    url:
                      type: string
                      description: The URL of the page.
                    frontend_url:
                      type: string
                      description: The frontend URL for accessing the page.
                  required:
                    - id
                    - title
                    - url
                    - frontend_url
        "401":
          description: Invalid API Key or unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Session not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/sessions/{session_id}/recordings:
    get:
      summary: List Session Recordings
      description: Retrieves the URLs of the browser session's video recordings. Requires a valid API key for authentication.
      tags:
        - Session Recordings
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the browser session to retrieve recordings for.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        '200':
          description: A set of recording URLs associated with the browser session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordingListResponse'
        '401':
          description: Invalid API Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session recordings not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests, please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions/{session_id}/downloads:
    get:
      summary: List Session Downloads
      description: Retrieves metadata of files downloaded during a browser session. Requires a valid API key for authentication.
      tags:
        - Browser Sessions
      parameters:
        - in: path
          name: session_id
          required: true
          description: The unique identifier of the browser session to retrieve downloads for.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        '200':
          description: A list of download metadata associated with the browser session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadListResponse'
        '401':
          description: Invalid or missing API key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The browser session or its downloads metadata could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests, please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions/{session_id}/recordings/primary/fetch:
    get:
      summary: Get Session Recording
      description: Downloads the primary recording file for the specified browser session. Returns the recording as an MP4 file.
      tags:
        - Session Recordings
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the browser session to download the recording for.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        '200':
          description: The browser session recording file
          content:
            video/mp4:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid API Key - Authentication failed or API key is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Recording not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tools/fetch-webpage:
    post:
      summary: Get Webpage Content
      description: Retrieve the rendered content of a webpage, optionally formatted as Markdown or HTML.
      tags:
        - Tools
      security:
        - api_key_header: []
      parameters:
        - in: query
          name: sessionId
          schema:
            type: string
          description: An optional browser session identifier to reference an existing running browser session. If provided, the tool will execute within that browser session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchWebpageRequestSchema'
      responses:
        '200':
          description: The fetched webpage content in the specified format.
          content:
            text/plain:
              schema:
                type: string
                description: The rendered content of the webpage.
        '400':
          description: Invalid request, such as missing or invalid URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tools/perform-web-task:
    post:
      summary: Perform Web Task
      description: Start from a URL and perform the given task.
      tags:
        - AI Tools
      security:
        - api_key_header: []
      parameters:
        - in: query
          name: sessionId
          schema:
            type: string
            title: Browser Session
          description: An optional browser session identifier to reference an existing running browser sessions. When passed, the tool will be executed on the provided browser session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformWebTaskRequestSchema'
      responses:
        '200':
          description: The result of the autonomous task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformWebTaskResponseSchema'
        '400':
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/tools/screenshot:
    post:
      summary: Screenshot Webpage
      description: This endpoint captures a screenshot of the specified webpage using Chromium. Users can customize the viewport dimensions and capture options.
      tags:
        - Tools
      security:
        - api_key_header: []
      parameters:
        - in: query
          name: sessionId
          schema:
            type: string
          description: An optional browser session identifier to reference an existing running browser sessions. When passed, the tool will be executed on the provided browser session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenshotRequestSchema'
      responses:
        '200':
          description: Screenshot successfully captured.
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid input parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to take screenshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/sessions/{sessionId}/screenshot:
    get:
      summary: Take Screenshot
      description: Takes a screenshot of the current browser session and returns it as an image.
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Screenshot taken successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Failed to take screenshot
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /v1/sessions/{sessionId}/mouse/click:
    post:
      summary: Mouse Click
      description: Performs a mouse click at the specified coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MouseClickRequestSchema'
      responses:
        '200':
          description: Click performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates or parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform click

  /v1/sessions/{sessionId}/mouse/doubleClick:
    post:
      summary: Mouse Double Click
      description: Performs a double click at the specified coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MouseClickRequestSchema'
      responses:
        '200':
          description: Double click performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates or parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform double click

  /v1/sessions/{sessionId}/mouse/down:
    post:
      summary: Mouse Down
      description: Performs a mouse button down action at the specified coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MouseClickRequestSchema'
      responses:
        '200':
          description: Mouse down performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates or parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform mouse down

  /v1/sessions/{sessionId}/mouse/up:
    post:
      summary: Mouse Up
      description: Performs a mouse button up action at the specified coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MouseClickRequestSchema'
      responses:
        '200':
          description: Mouse up performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates or parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform mouse up

  /v1/sessions/{sessionId}/mouse/move:
    post:
      summary: Mouse Move
      description: Moves the mouse cursor to the specified coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoordinatesRequestSchema'
      responses:
        '200':
          description: Mouse move performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates
        '404':
          description: Session not found
        '500':
          description: Failed to perform mouse move

  /v1/sessions/{sessionId}/drag-and-drop:
    post:
      summary: Drag and Drop
      description: Performs a drag and drop operation from start coordinates to end coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DragDropRequestSchema'
      responses:
        '200':
          description: Drag and drop performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates or parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform drag and drop

  /v1/sessions/{sessionId}/scroll:
    post:
      summary: Scroll
      description: Performs a scroll action at the specified coordinates
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrollRequestSchema'
      responses:
        '200':
          description: Scroll performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid coordinates or parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform scroll

  /v1/sessions/{sessionId}/keyboard/type:
    post:
      summary: Type Text
      description: Types the specified text with optional delay between keystrokes
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeTextRequestSchema'
      responses:
        '200':
          description: Text typed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid parameters
        '404':
          description: Session not found
        '500':
          description: Failed to type text

  /v1/sessions/{sessionId}/keyboard/shortcut:
    post:
      summary: Keyboard Shortcut
      description: Performs a keyboard shortcut using the specified keys
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyboardShortcutRequestSchema'
      responses:
        '200':
          description: Shortcut performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid parameters
        '404':
          description: Session not found
        '500':
          description: Failed to perform shortcut

  /v1/sessions/{sessionId}/clipboard:
    get:
      summary: Get Clipboard Content
      description: Retrieves the current content of the clipboard
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Clipboard content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClipboardResponseSchema'
        '404':
          description: Session not found
        '500':
          description: Failed to get clipboard content
    post:
      summary: Set Clipboard Content
      description: Sets the content of the clipboard
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClipboardRequestSchema'
      responses:
        '200':
          description: Clipboard content set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid parameters
        '404':
          description: Session not found
        '500':
          description: Failed to set clipboard content

  /v1/sessions/{sessionId}/copy:
    post:
      summary: Copy Selected Text
      description: Copies the currently selected text to the clipboard
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Text copied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CopyResponseSchema'
        '404':
          description: Session not found
        '500':
          description: Failed to copy text

  /v1/sessions/{sessionId}/paste:
    post:
      summary: Paste Text
      description: Pastes text at the current cursor position
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasteRequestSchema'
      responses:
        '200':
          description: Text pasted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid parameters
        '404':
          description: Session not found
        '500':
          description: Failed to paste text

  /v1/sessions/{session_id}/recordings/pause:
    post:
      summary: Pause Session Recording
      description: Pauses the video recording for the specified browser session.
      tags:
        - Session Recordings
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the browser session for which to pause recording.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        '200':
          description: Recording paused successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid API Key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to pause recording.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

  /v1/sessions/{session_id}/recordings/resume:
    post:
      summary: Resume Session Recording
      description: Resumes the video recording for the specified browser session.
      tags:
        - Session Recordings
      parameters:
        - in: path
          name: session_id
          required: true
          description: The ID of the browser session for which to resume recording.
          schema:
            type: string
      security:
        - api_key_header: []
      responses:
        '200':
          description: Recording resumed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid API Key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to resume recording.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

  /v1/sessions/{sessionId}/goto:
    post:
      summary: Navigate to URL
      description: Navigates the browser session to the specified URL
      security:
        - api_key_header: []
      tags:
        - OS Level Control
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavigateRequestSchema'
      responses:
        '200':
          description: Navigation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: Invalid URL or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to navigate to URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

  /v1/sessions/{sessionId}/uploads:
    post:
      summary: Upload Files
      description: |
        Upload files directly to a browser session for use with web forms and file inputs.
        
        Files are saved to the session's uploads directory and can be referenced in CDP commands.
      security:
        - api_key_header: []
      tags:
        - Browser Sessions
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The browser session ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload to the browser session
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
        '400':
          description: Invalid request (no file uploaded or file too large)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: integer
                      message:
                        type: string
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to upload file
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'

  /v1/sessions/{sessionId}/agent/files:
    post:
      summary: Upload Agent Resources
      description: |
        Upload files as agent resources to a browser session using multipart/form-data. 
        If you upload a ZIP file, it will be automatically extracted and the files will be made available as agent resources.
        If you upload a single file, it will be saved directly as an agent resource.
        Resources are then accessible to AI agents for task completion and automation.
      security:
        - api_key_header: []
      tags:
        - Agentic capabilities
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The browser session ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload as agent resource (ZIP files will be extracted automatically)
      responses:
        '200':
          description: Agent resources uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                      message:
                        type: string
        '400':
          description: Invalid request (no resource uploaded or file too large)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: integer
                      message:
                        type: string
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to upload or process agent resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List Agent Resources
      description: |
        List all resources that have been uploaded to the browser session for agent use.
        Returns resource metadata including name, size, type, and last modified timestamp.
      security:
        - api_key_header: []
      tags:
        - Agentic capabilities
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The browser session ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agent resources listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      files:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The resource name
                            size:
                              type: integer
                              description: Resource size in bytes
                            type:
                              type: string
                              description: Resource extension/type
                            lastModified:
                              type: string
                              format: date-time
                              description: When the resource was last modified
        '400':
          description: Session is not running
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to list agent resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/ErrorResponse'



  /v1/extensions:
    post:
      summary: Upload Extension
      description: Upload a new browser extension as a ZIP file. The extension will be validated and stored for use in browser sessions.
      security:
        - api_key_header: []
      tags:
        - Extensions
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - file
              properties:
                name:
                  type: string
                  description: User-friendly name for the extension (1-255 characters)
                file:
                  type: string
                  format: binary
                  description: ZIP file containing the browser extension
      responses:
        '200':
          description: Extension uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExtensionResponseSchema'
        '400':
          description: Invalid request or extension validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to upload extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List Extensions
      description: Get all extensions for the authenticated user
      security:
        - api_key_header: []
      tags:
        - Extensions
      responses:
        '200':
          description: List of user extensions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionListResponse'
        '500':
          description: Unable to list extensions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/extensions/{id}:
    get:
      summary: Get Extension Details
      description: Get details of a specific extension by its ID
      security:
        - api_key_header: []
      tags:
        - Extensions
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the extension to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Extension details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionResponseSchema'
        '404':
          description: Extension not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to get extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete Extension
      description: Delete an extension and remove it from storage
      security:
        - api_key_header: []
      tags:
        - Extensions
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the extension to delete
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Extension deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Extension not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unable to delete extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/events/{event_name}/wait:
    post:
      summary: Wait for Event
      description: |
        Waits for a specific event to be signaled by another process, workflow, or session. 
        This endpoint blocks until the event is signaled or the timeout is reached.
        Useful for coordinating between multiple browser sessions or workflows.
      security:
        - api_key_header: []
      tags:
        - Event Coordination
      parameters:
        - name: event_name
          in: path
          required: true
          description: The name of the event to wait for
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitForEventRequestSchema'
      responses:
        '200':
          description: Event was signaled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseSchema'
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '408':
          description: Timeout - Event was not signaled within the specified timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to wait for event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/events/{event_name}:
    post:
      summary: Signal Event
      description: |
        Signals an event with associated data, unblocking any clients waiting for this event.
        This enables coordination between different browser sessions, workflows, or external processes.
      security:
        - api_key_header: []
      tags:
        - Event Coordination
      parameters:
        - name: event_name
          in: path
          required: true
          description: The name of the event to signal
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignalEventRequestSchema'
      responses:
        '200':
          description: Event signaled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid request - Event data is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to signal event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/sessions/{session_id}/agent/pause:
    post:
      summary: Pause Agent
      description: Pauses the AI agent for the specified browser session.
      security:
        - api_key_header: []
      tags:
        - Agentic capabilities
      parameters:
        - name: session_id
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agent paused successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Session is not running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to pause agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/sessions/{session_id}/agent/resume:
    post:
      summary: Resume Agent
      description: Resumes the AI agent for the specified browser session.
      security:
        - api_key_header: []
      tags:
        - Agentic capabilities
      parameters:
        - name: session_id
          in: path
          required: true
          description: The ID of the browser session
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agent resumed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Session is not running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to resume agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags: []
